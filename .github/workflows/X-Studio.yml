name: X-Studio

on:
  workflow_dispatch:
    inputs:
      name:
        description: Release version name
        required: true

run-name: ${{ github.event.inputs.name }}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
        - { name: "Windows x64 debug", os: windows-latest, arch: x64, mode: debug, qt_arch: win64_msvc2019_64, qt_archive: 'qtbase qtdeclarative' }
        - { name: "Windows x64 releasedbg", os: windows-latest, arch: x64, mode: releasedbg, qt_arch: win64_msvc2019_64, qt_archive: 'qtbase qtdeclarative' }
        - { name: "Ubuntu x86_64 debug", os: ubuntu-latest, arch: x86_64, mode: debug, qt_arch: gcc_64, qt_archive: 'qtbase qtdeclarative icu' }
        - { name: "Ubuntu x86_64 releasedbg", os: ubuntu-latest, arch: x86_64, mode: releasedbg, qt_arch: gcc_64, qt_archive: 'qtbase qtdeclarative icu' }
        - { name: "MacOS x86_64 debug", os: macOS-latest, arch: x86_64, mode: debug, qt_arch: clang_64, qt_archive: 'qtbase qtdeclarative qttools' }
        - { name: "MacOS x86_64 releasedbg", os: macOS-latest, arch: x86_64, mode: releasedbg, qt_arch: clang_64, qt_archive: 'qtbase qtdeclarative qttools' }

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    steps:
    - name: Install system dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get -y install mesa-common-dev libglu1-mesa-dev
    
    - uses: actions/checkout@v3
      with:
        repository: 'ZJUDMAL/X-Studio'
        token: ${{ secrets.XSTUDIOPACKAGES_PUBLISH_TOKEN }}

    - uses: actions/checkout@v3
      with:
        repository: 'ZJUDMAL/XStudioPackages'
        token: ${{ secrets.XSTUDIOPACKAGES_PUBLISH_TOKEN }}
        path: 'XStudioPackages'

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '5.15.2'
        target: 'desktop'
        arch: ${{ matrix.config.qt_arch }}
        cache: 'true'
        archives: ${{ matrix.config.qt_archive }}
    
    # Force xmake to a specific folder (for cache)
    - name: Set xmake env (Linux MacOS)
      if: ${{ (runner.os == 'Linux') || (runner.os == 'macOS') }}
      run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" >> $GITHUB_ENV

    - name: Set xmake env (Windows)
      if: runner.os == 'Windows'
      run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - uses: xmake-io/github-action-setup-xmake@v1
      with:
        xmake-version: latest
        actions-cache-folder: '.xmake-cache'
        # xmake-cache-${actionsCacheKey}-${ver}-${sha}-${os.arch()}-${os.platform()}-${process.env.RUNNER_OS}
        actions-cache-key: base
    
    - name: Restore cache (Linux MacOS)
      if: ${{ (runner.os == 'Linux') || (runner.os == 'macOS') }}
      uses: actions/cache/restore@v3
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
        key: x-studio-cache-package-${{ matrix.config.arch }}-${{ matrix.config.os }}

    - name: Restore cache (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache/restore@v3
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}\.xmake\packages
        key: x-studio-cache-package-${{ matrix.config.arch }}-${{ matrix.config.os }}

    # Fetch xmake dephash
    - name: Retrieve dependencies hash
      id: XMAKE_PACKAGE_HASH_OLD
      shell: bash
      run: echo "hash=$(xmake l utils.ci.packageskey)" >> $GITHUB_OUTPUT

    - name: Install package
      run: |
        xmake repo -uvD
        xmake require -y

    - name: Retrieve dependencies hash
      id: XMAKE_PACKAGE_HASH
      shell: bash
      run: echo "hash=$(xmake l utils.ci.packageskey)" >> $GITHUB_OUTPUT
      
    - name: Echo Package Cache Hash
      shell: bash
      run: |
        echo "### Package Cache Hash" >> $GITHUB_STEP_SUMMARY
        echo "**Old Package Hash**      ${{ steps.XMAKE_PACKAGE_HASH_OLD.outputs.hash }}" >> $GITHUB_STEP_SUMMARY
        echo "**Current Package Hash**  ${{ steps.XMAKE_PACKAGE_HASH.outputs.hash }}" >> $GITHUB_STEP_SUMMARY
        if [ "$steps.XMAKE_PACKAGE_HASH_OLD.outputs.hash" == "$steps.XMAKE_PACKAGE_HASH.outputs.hash" ]; then
          echo "**No need update**" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Need update**" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check cache whether need update
      if: ${{ (steps.XMAKE_PACKAGE_HASH_OLD.outputs.hash != steps.XMAKE_PACKAGE_HASH.outputs.hash) || (steps.XMAKE_PACKAGE_HASH_OLD.outputs.hash != steps.XMAKE_PACKAGE_HASH.outputs.hash) }}
      shell: bash
      run: >
          curl -L -s
          -X DELETE
          -H "Accept: application/vnd.github+json"
          -H "Authorization: token  ${{ secrets.RUNNER_ACTION_TOKEN }}"
          https://api.github.com/repos/ZJUDMAL/Runner/actions/caches?key=x-studio-cache-package-${{ matrix.config.arch }}-${{ matrix.config.os }}

    - name: Save cache (Linux MacOS)
      if: ${{ (steps.XMAKE_PACKAGE_HASH_OLD.outputs.hash != steps.XMAKE_PACKAGE_HASH.outputs.hash) && (runner.os == 'Linux') || (runner.os == 'macOS') }}
      uses: actions/cache/save@v3
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
        key: x-studio-cache-package-${{ matrix.config.arch }}-${{ matrix.config.os }}

    - name: Save cache (Windows)
      if: ${{ (steps.XMAKE_PACKAGE_HASH_OLD.outputs.hash != steps.XMAKE_PACKAGE_HASH.outputs.hash) && runner.os == 'Windows' }}
      uses: actions/cache/save@v3
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}\.xmake\packages
        key: x-studio-cache-package-${{ matrix.config.arch }}-${{ matrix.config.os }}
    
    # Add logical to update cache

    - name: Configure xmake and install dependencies
      run: xmake config --arch=${{ matrix.config.arch }} --mode=${{ matrix.config.mode }} --ccache=n

    - name: Build
      run: |
        xmake build X-Studio
        xmake build FileIOPlugin
        xmake build AdvancedToolsPlugin
        xmake build SelectionToolsPlugin

    - name: Package
      run: |
        xmake package PACKAGE_ALL

    - name: Archive and upload artifact
      shell: bash
      id: ARTIFACT
      run: |
        tar -C ./package -zcvf X-Studio-${{ github.event.inputs.name }}-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.mode }}.tar.gz .
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "hash=$(shasum -a 256 X-Studio-${{ github.event.inputs.name }}-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.mode }}.tar.gz)" >> $GITHUB_OUTPUT
        else
          echo "hash=$(sha256sum X-Studio-${{ github.event.inputs.name }}-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.mode }}.tar.gz)" >> $GITHUB_OUTPUT
        fi
      
    - name: Artifact Hash
      shell: bash
      run: |
        echo "${{ steps.ARTIFACT.outputs.hash }}" > SHA256SUM
        echo "### Artifact Hash" >> $GITHUB_STEP_SUMMARY
        echo "**Artifact Hash** ${{ steps.ARTIFACT.outputs.hash }}" >> $GITHUB_STEP_SUMMARY

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: X-Studio-${{ github.event.inputs.name }}-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.mode }}.tar.gz
        token: ${{ secrets.XSTUDIOPACKAGES_PUBLISH_TOKEN }}
        name: ${{ github.event.inputs.name }}
        tag_name: ${{ github.event.inputs.name }}
        append_body: true
        body_path: SHA256SUM
        repository: ZJUDMAL/XStudioPackages