name: X-Studio MacOS

on:
  workflow_dispatch:
    inputs:
      name:
        description: Release version name
        required: true

run-name: ${{ github.event.inputs.name }}

jobs:
  build:
    strategy:
      matrix:
        config:
        # - { name: "Windows x64 debug", os: windows-latest, arch: x64, mode: debug, qt: win64_msvc2019_64 }
        #- { name: "Windows x64 releasedbg", os: windows-latest, arch: x64, mode: releasedbg, qt: win64_msvc2019_64 }
        # - { name: "Ubuntu x86_64 debug", os: ubuntu-latest, arch: x86_64, mode: debug, qt: gcc_64  }
        #- { name: "Ubuntu x86_64 releasedbg", os: ubuntu-latest, arch: x86_64, mode: releasedbg, qt: gcc_64 }
        - { name: "MacOS x86_64 debug", os: macOS-latest, arch: x86_64, mode: debug, qt: clang_64 }
        #- { name: "MacOS x86_64 releasedbg", os: macOS-latest, arch: x86_64, mode: releasedbg, qt: clang_64 }

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    steps:
    - name: Install system dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update

    - uses: actions/checkout@v3
      with:
        repository: 'ZJUDMAL/X-Studio'
        token: ${{ secrets.XSTUDIOPACKAGES_PUBLISH_TOKEN }}

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        target: 'desktop'
        arch: ${{ matrix.config.qt }}
        cache: 'true'
        setup-python: 'false'
        archives: 'qtbase qtscxml'
    
    # Force xmake to a specific folder (for cache)
    - name: Set xmake env (Linux)
      if: runner.os == 'Linux'
      run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" >> $GITHUB_ENV

    - name: Set xmake env (Windows)
      if: runner.os == 'Windows'
      run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - uses: xmake-io/github-action-setup-xmake@v1
      with:
        xmake-version: latest
        actions-cache-folder: '.xmake-cache'
        # xmake-cache-${actionsCacheKey}-${ver}-${sha}-${os.arch()}-${os.platform()}-${process.env.RUNNER_OS}
        actions-cache-key: base
    
    - name: Restore cache
      uses: actions/cache/restore@v3
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}\.xmake\packages
        key: x-studio-cache-package-${{ matrix.config.arch }}-${{ matrix.config.os }}

    - name: Install package
      run: |
        xmake repo -u
        xmake require -y

    - name: Save cache
      uses: actions/cache/save@v3
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}\.xmake\packages
        key: x-studio-cache-package-${{ matrix.config.arch }}-${{ matrix.config.os }}

    - name: Configure xmake and install dependencies
      run: xmake config --arch=${{ matrix.config.arch }} --mode=${{ matrix.config.mode }} --ccache=n

    - name: Build
      run: |
        xmake build BUILD_ALL

    - name: Package
      run: |
        xmake package BUILD_ALL

    - name: Archive and upload artifact
      run: |
        tar -C ./package -zcvf X-Studio-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.mode }}.tar.gz .
        if [ "$RUNNER_OS" == "macOS" ]; then
          shasum -a 256 X-Studio-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.mode }}.tar.gz > SHA256SUM
        else
          sha256sum X-Studio-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.mode }}.tar.gz > SHA256SUM
        fi
      shell: bash

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: X-Studio-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.mode }}.tar.gz
        token: ${{ secrets.XSTUDIOPACKAGES_PUBLISH_TOKEN }}
        name: ${{ github.event.inputs.name }}
        tag_name: ${{ github.event.inputs.name }}
        append_body: true
        body_path: SHA256SUM
        repository: ZJUDMAL/XStudioPackages